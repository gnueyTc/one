package com.gnuey.one.storage.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gnuey.one.bean.activity.read.PlayAudioBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SystemMessage".
*/
public class PlayAudioBeanDao extends AbstractDao<PlayAudioBean, Long> {

    public static final String TABLENAME = "SystemMessage";

    /**
     * Properties of entity PlayAudioBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MainKey = new Property(0, Long.class, "mainKey", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "id");
        public final static Property Title = new Property(2, String.class, "title", false, "title");
        public final static Property Author = new Property(3, String.class, "author", false, "author");
        public final static Property Audio_url = new Property(4, String.class, "audio_url", false, "audio_url");
        public final static Property Audio_platform = new Property(5, String.class, "audio_platform", false, "audio_platform");
        public final static Property Platform_name = new Property(6, String.class, "platform_name", false, "platform_name");
        public final static Property Platform_icon = new Property(7, String.class, "platform_icon", false, "platform_icon");
    }


    public PlayAudioBeanDao(DaoConfig config) {
        super(config);
    }
    
    public PlayAudioBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SystemMessage\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: mainKey
                "\"id\" TEXT NOT NULL ," + // 1: id
                "\"title\" TEXT," + // 2: title
                "\"author\" TEXT," + // 3: author
                "\"audio_url\" TEXT," + // 4: audio_url
                "\"audio_platform\" TEXT," + // 5: audio_platform
                "\"platform_name\" TEXT," + // 6: platform_name
                "\"platform_icon\" TEXT);"); // 7: platform_icon
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SystemMessage\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PlayAudioBean entity) {
        stmt.clearBindings();
 
        Long mainKey = entity.getMainKey();
        if (mainKey != null) {
            stmt.bindLong(1, mainKey);
        }
        stmt.bindString(2, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String audio_url = entity.getAudio_url();
        if (audio_url != null) {
            stmt.bindString(5, audio_url);
        }
 
        String audio_platform = entity.getAudio_platform();
        if (audio_platform != null) {
            stmt.bindString(6, audio_platform);
        }
 
        String platform_name = entity.getPlatform_name();
        if (platform_name != null) {
            stmt.bindString(7, platform_name);
        }
 
        String platform_icon = entity.getPlatform_icon();
        if (platform_icon != null) {
            stmt.bindString(8, platform_icon);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PlayAudioBean entity) {
        stmt.clearBindings();
 
        Long mainKey = entity.getMainKey();
        if (mainKey != null) {
            stmt.bindLong(1, mainKey);
        }
        stmt.bindString(2, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        String audio_url = entity.getAudio_url();
        if (audio_url != null) {
            stmt.bindString(5, audio_url);
        }
 
        String audio_platform = entity.getAudio_platform();
        if (audio_platform != null) {
            stmt.bindString(6, audio_platform);
        }
 
        String platform_name = entity.getPlatform_name();
        if (platform_name != null) {
            stmt.bindString(7, platform_name);
        }
 
        String platform_icon = entity.getPlatform_icon();
        if (platform_icon != null) {
            stmt.bindString(8, platform_icon);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PlayAudioBean readEntity(Cursor cursor, int offset) {
        PlayAudioBean entity = new PlayAudioBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // mainKey
            cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // audio_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // audio_platform
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // platform_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // platform_icon
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PlayAudioBean entity, int offset) {
        entity.setMainKey(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAudio_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAudio_platform(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPlatform_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPlatform_icon(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PlayAudioBean entity, long rowId) {
        entity.setMainKey(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PlayAudioBean entity) {
        if(entity != null) {
            return entity.getMainKey();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PlayAudioBean entity) {
        return entity.getMainKey() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
